openapi: 3.0.0
info:
  title: wasaText
  version: 3.0.1
  description: API per il progetto wasaText
servers:
  - url: http://127.0.0.1:3000
    description: Server di sviluppo in locale

tags:
  - name: login
    description: Operazioni di autenticazione utente
  - name: utente
    description: Operazioni relative agli utenti
  - name: conversazione
    description: Operazioni relative alle conversazioni
  - name: messaggio
    description: Operazioni relative ai messaggi
  - name: gruppo
    description: Operazioni relative ai gruppi

  # This YAML file defines a set of API operations for a messaging application.
  # Below is a brief description of each operation:
  #
  # doLogin:
  # x - Simplified login operation for user authentication.
  #
  # setMyUserName:
  # x - Allows the user to set or update their username.
  #
  # getMyConversations:
  # x - Retrieves a list of all conversations associated with the user.
  #
  # getConversation:
  # x - Fetches the details of a specific conversation by its identifier.
  #
  # sendMessage:
  # x - Sends a message to a specific conversation or user.
  #
  # forwardMessage:
  # x - Forwards an existing message to another conversation or user.
  #
  # commentMessage:
  # x - Adds a comment to a specific message.
  #
  # uncommentMessage:
  # x - Removes a previously added comment from a message.
  #
  # deleteMessage:
  # x - Deletes a specific message from a conversation.
  #
  # addToGroup:
  # x - Adds a user to a group conversation.
  #
  # leaveGroup:
  # x - Allows the user to leave a group conversation.
  #
  # setGroupName:
  #   - Updates the name of a group conversation.
  #
  # setMyPhoto:
  # x - Sets or updates the user's profile photo.
  #
  # setGroupPhoto:
  #   - Sets or updates the photo of a group conversation.

paths:
  /session:
    post:
      tags:
        - login
      summary: Logs in the user
      description: |-
        If the user does not exist, it will be created,
        and an identifier is returned.
        If the user exists, the user identifier is returned.
      operationId: doLogin
      requestBody:
        description: User details
        content:
          application/json:
            schema:
              description: User name for login
              type: object
              properties:
                name:
                  type: string
                  example: Maria
                  pattern: "^.*?$"
                  minLength: 3
                  maxLength: 16
        required: true
      responses:
        "201":
          description: User log-in action successful
          content:
            application/json:
              schema:
                description: User identifier
                type: object
                properties:
                  identifier:
                    type: string
                    pattern: "^[a-zA-Z0-9]+$"
                    minLength: 2
                    maxLength: 12
                    example: "abcdef012345"
        "400": { $ref: "#/components/responses/BadRequest" }
        "500": { $ref: "#/components/responses/InternalServerError" }

  /user:
    get:
      tags:
        - utente
      operationId: getUsers
      summary: Ottieni la lista di utenti
      description: >
        Ottiene la lista di utenti registrati.
        Restituisce un elenco di utenti
      responses:
        "200":
          description: Elenco degli utenti
          content:
            application/json:
              schema:
                description: Lista di utenti
                type: array
                items:
                  $ref: "#/components/schemas/User"
                minItems: 0
                maxItems: 200
                example:
                  - id: 1
                    name: "Mario Rossi"
                    email: "mario.rossi@example.com"
                  - id: 2
                    name: "Luca Bianchi"
                    email: "luca.bianchi@example.com"

        "401": { $ref: "#/components/responses/Unauthorized" }
        "500": { $ref: "#/components/responses/InternalServerError" }

  /user/{userID}:
    parameters:
      - $ref: "#/components/parameters/userID"

    get:
      tags:
        - utente
      operationId: getUser
      summary: Ottieni informazioni sull'utente
      description: >
        Ottiene le informazioni sull'utente specificato dall'ID.
        Restituisce tutte le informazioni dell'utente.
      responses:
        "200":
          description: Informazioni sull'utente
          content:
            application/json:
              example:
                user_id: 1
                name: "Mario Rossi"
                username: "RedMario"

              schema:
                $ref: "#/components/schemas/User"

        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "404": { $ref: "#/components/responses/NotFound" }
        "500": { $ref: "#/components/responses/InternalServerError" }

  /user/{userID}/photo:
    parameters:
      - $ref: "#/components/parameters/userID"

    get:
      tags:
        - utente
      operationId: getUserPhoto
      summary: Ottieni la foto dell'utente
      description: >
        Ottiene la foto del profilo dell'utente specificato.
        Restituisce l'ID della foto dell'utente.
      responses:
        "200":
          description: Foto dell'utente
          content:
            image/jpeg:
              schema:
                type: string
                format: binary

        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "404": { $ref: "#/components/responses/NotFound" }
        "500": { $ref: "#/components/responses/InternalServerError" }

  /me:
    get:
      tags:
        - utente
      operationId: getMe
      summary: Ottieni informazioni sull'utente loggato
      description: >
        Ottiene le informazioni sull'utente loggato.
        Restituisce tutte le informazioni dell'utente.
      responses:
        "200":
          description: Informazioni sull'utente loggato
          content:
            application/json:
              example:
                message_id: 4
                sender_id: 3
                sender: "Giovanni"
                replied_message_id: 2
                conversation_id: 3
                content: "ciao"
                photo: false
                status: 2
                timestamp: "2023-10-01T12:00:00Z"

              schema:
                $ref: "#/components/schemas/Message"

        "401": { $ref: "#/components/responses/Unauthorized" }
        "404": { $ref: "#/components/responses/NotFound" }
        "500": { $ref: "#/components/responses/InternalServerError" }

  /me/username:
    put:
      tags:
        - utente
      operationId: setMyUserName
      summary: Imposta lo username dell'utente
      description: >
        Imposta lo username utente per l'utente corrente.
        Se il nome utente è già in uso, restituisce un errore.
      requestBody:
        required: true
        description: Nome utente da impostare
        content:
          application/json:
            schema:
              type: object
              description: Nome utente da impostare
              properties:
                username:
                  type: string
                  pattern: ^.*?$
                  example: "marta"
                  minLength: 3
                  maxLength: 16
              required:
                - username
      responses:
        "204":
          description: Nome utente impostato correttamente

        "401": { $ref: "#/components/responses/Unauthorized" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "500": { $ref: "#/components/responses/InternalServerError" }

  /me/photo:
    put:
      tags:
        - utente
      operationId: setMyPhoto
      summary: Imposta la foto del profilo
      description: >
        Imposta la foto del profilo per l'utente corrente.
      requestBody:
        description: la foto del profilo dell'utente
        required: true
        content:
          image/jpeg:
            schema:
              type: string
              format: binary
      responses:
        "204":
          description: Foto del profilo impostata correttamente

        "401": { $ref: "#/components/responses/Unauthorized" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "500": { $ref: "#/components/responses/InternalServerError" }

  /conversation:
    get:
      tags:
        - utente
      operationId: getMyConversations
      summary: Ottieni le conversazioni dell'utente
      description: >
        Ottiene tutte le conversazioni associate all'utente specificato.
        Restituisce un elenco di conversazioni.

      responses:
        "200":
          description: Elenco delle conversazioni
          content:
            application/json:
              example:
                - conversation_id: 2
                  name: "scuola"
                  is_group: true

                - conversation_id: 3
                  name: "Giovanni"
                  is_group: false
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Conversation"
                minItems: 0
                maxItems: 200

        "401": { $ref: "#/components/responses/Unauthorized" }
        "404": { $ref: "#/components/responses/NotFound" }
        "500": { $ref: "#/components/responses/InternalServerError" }

    post:
      tags:
        - conversazione
      operationId: addConversation
      summary: Crea una nuova conversazione
      description: >
        Crea una nuova conversazione tra gli utenti specificati.
        Restituisce la conversazione creata.
      requestBody:
        description: il nome della conversazione
        required: true
        content:
          application/json:
            schema:
              type: object
              description: Nome della conversazione
              properties:
                name:
                  type: string
                  pattern: ^.*?$
                  example: "conversazione di lavoro"
                  minLength: 1
                  maxLength: 50

              required:
                - name
      responses:
        "200":
          description: Conversazione creata correttamente
          content:
            application/json:
              example:
                conversation_id: 3
                name: "Giovanni"
                is_group: false
              schema:
                $ref: "#/components/schemas/Conversation"

        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "404": { $ref: "#/components/responses/NotFound" }
        "500": { $ref: "#/components/responses/InternalServerError" }

  /conversation/{conversationID}:
    parameters:
      - $ref: "#/components/parameters/conversationID"
    get:
      tags:
        - conversazione
      operationId: getConversation
      summary: Ottieni una conversazione specifica
      description: >
        Ottiene i dettagli di una conversazione specifica.
      responses:
        "200":
          description: Dettagli della conversazione
          content:
            application/json:
              example:
                conversation_id: 3
                name: "Giovanni"
                is_group: false

              schema:
                $ref: "#/components/schemas/Conversation"

        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "404": { $ref: "#/components/responses/NotFound" }
        "500": { $ref: "#/components/responses/InternalServerError" }

  /conversation/{conversationID}/photo:
    parameters:
      - $ref: "#/components/parameters/conversationID"

    post:
      tags:
        - conversazione
      operationId: sendPhoto
      summary: invia una foto
      description: >
        Invia una foto alla conversazione specificata.
      requestBody:
        description: si richiede la foto da inviare
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                photo:
                  type: string
                  format: binary
                  example: "https://example.com/images/avatar.png"
              required:
                - photo
      responses:
        "204":
          description: Foto inviata correttamente

        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "404": { $ref: "#/components/responses/NotFound" }
        "500": { $ref: "#/components/responses/InternalServerError" }

  /conversation/{conversationID}/photo/{messageID}:
    parameters:
      - $ref: "#/components/parameters/conversationID"
      - $ref: "#/components/parameters/messageID"

    get:
      tags:
        - conversazione
      operationId: getConversationPhoto
      summary: Ottieni una foto inviata in una conversazione
      description: >
        Ottiene una foto inviata in una conversazione specifica.
      responses:
        "200":
          description: Foto della conversazione
          content:
            image/jpeg:
              schema:
                description: Foto della conversazione
                type: string
                format: binary

        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "404": { $ref: "#/components/responses/NotFound" }
        "500": { $ref: "#/components/responses/InternalServerError" }

  /conversation/{conversationID}/message:
    parameters:
      - $ref: "#/components/parameters/conversationID"

    get:
      tags:
        - conversazione
      operationId: getMessages
      summary: Ottieni i messaggi di una conversazione
      description: >
        Ottiene tutti i messaggi di una conversazione specifica.
        Restituisce un elenco di messaggi.
      responses:
        "200":
          description: Elenco dei messaggi
          content:
            application/json:
              example:
                - message_id: 4
                  sender_id: 3
                  sender: "Giovanni"
                  replied_message_id: 2
                  conversation_id: 3
                  content: "ciao"
                  photo: false
                  status: 2
                  timestamp: "2023-10-01T12:00:00Z"
                - message_id: 5
                  sender_id: 2
                  sender: "Giovanni"
                  replied_message_id: 2
                  conversation_id: 3
                  content: "ciao a te"
                  photo: false
                  status: 1
                  timestamp: "2023-10-01T13:00:00Z"

              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Message"
                minItems: 0
                maxItems: 500

        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "404": { $ref: "#/components/responses/NotFound" }
        "500": { $ref: "#/components/responses/InternalServerError" }

    post:
      tags:
        - conversazione
      operationId: sendMessage
      summary: Invia un messaggio
      description: >
        Invia un messaggio a una conversazione specifica.
        Restituisce l'ID del messaggio inviato.
      requestBody:
        description: il messaggio da inviare
        required: true
        content:
          application/json:
            example:
              message_id: 4
              sender_id: 3
              sender: "Giovanni"
              replied_message_id: 2
              conversation_id: 3
              content: "ciao"
              photo: false
              status: 2
              timestamp: "2023-10-01T12:00:00Z"
            schema:
              $ref: "#/components/schemas/Message"
      responses:
        "200":
          description: Messaggio inviato correttamente
          content:
            application/json:
              example:
                message_id: 4
                sender_id: 3
                sender: "Giovanni"
                replied_message_id: 2
                conversation_id: 3
                content: "ciao"
                photo: false
                status: 2
                timestamp: "2023-10-01T12:00:00Z"
              schema:
                $ref: "#/components/schemas/Message"

        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "404": { $ref: "#/components/responses/NotFound" }
        "500": { $ref: "#/components/responses/InternalServerError" }

  /conversation/{conversationID}/lastMessage:
    parameters:
      - $ref: "#/components/parameters/conversationID"

    get:
      tags:
        - conversazione
      operationId: getLastMessage
      summary: Ottieni l'ultimo messaggio di una conversazione
      description: >
        Ottiene l'ultimo messaggio di una conversazione specifica.
        Restituisce i dettagli dell'ultimo messaggio.
      responses:
        "200":
          description: Dettagli dell'ultimo messaggio
          content:
            application/json:
              example:
                message_id: 4
                sender_id: 3
                sender: "Giovanni"
                replied_message_id: 2
                conversation_id: 3
                content: "ciao"
                photo: false
                status: 2
                timestamp: "2023-10-01T12:00:00Z"
              schema:
                $ref: "#/components/schemas/Message"

        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "404": { $ref: "#/components/responses/NotFound" }
        "500": { $ref: "#/components/responses/InternalServerError" }

  /message/{messageID}/forwarded:
    parameters:
      - $ref: "#/components/parameters/messageID"

    post:
      tags:
        - conversazione
      operationId: forwardMessage
      summary: Inoltra un messaggio
      description: >
        Inoltra un messaggio a una conversazione specifica.
        Restituisce l'ID del messaggio inoltrato.
      requestBody:
        description: json contente l'id della conversazione di destinazione
        required: true
        content:
          application/json:
            schema:
              type: object
              description: ID della conversazione di destinazione
              properties:
                reciver_id:
                  type: integer
                  example: 1
      responses:
        "204":
          description: Messaggio inoltrato correttamente

        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "404": { $ref: "#/components/responses/NotFound" }
        "500": { $ref: "#/components/responses/InternalServerError" }

  /me/newmessage:
    get:
      tags:
        - messaggio
      operationId: getNewMessages
      summary: Ottieni i nuovi messaggi
      description: >
        Ottiene i nuovi messaggi per l'utente loggato.
        Restituisce un elenco di nuovi messaggi.
      responses:
        "200":
          description: Elenco dei nuovi messaggi
          content:
            application/json:
              example:
                - message_id: 4
                  sender_id: 3
                  sender: "Giovanni"
                  replied_message_id: 2
                  conversation_id: 3
                  content: "ciao"
                  photo: false
                  status: 2
                  timestamp: "2023-10-01T12:00:00Z"
                - message_id: 5
                  sender_id: 2
                  sender: "Giovanni"
                  replied_message_id: 2
                  conversation_id: 3
                  content: "ciao a te"
                  photo: false
                  status: 1
                  timestamp: "2023-10-01T13:00:00Z"
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Message"
                minItems: 0
                maxItems: 500

        "401": { $ref: "#/components/responses/Unauthorized" }
        "404": { $ref: "#/components/responses/NotFound" }
        "500": { $ref: "#/components/responses/InternalServerError" }

  /message/{messageID}:
    parameters:
      - $ref: "#/components/parameters/messageID"

    delete:
      tags:
        - messaggio
      operationId: deleteMessage
      summary: Elimina un messaggio
      description: >
        Elimina un messaggio specifico.
        Restituisce l'ID del messaggio eliminato.
      responses:
        "200":
          description: Messaggio eliminato correttamente
          content:
            application/json:
              schema:
                type: object
                description: ID del messaggio eliminato
                properties:
                  messageID:
                    type: integer
                    example: 1

        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "404": { $ref: "#/components/responses/NotFound" }
        "500": { $ref: "#/components/responses/InternalServerError" }

  /message/{messageID}/reaction:
    parameters:
      - $ref: "#/components/parameters/messageID"

    get:
      tags:
        - messaggio
      operationId: getComments
      summary: Ottieni le reazioni a un messaggio
      description: >
        Ottiene tutte le reazioni a un messaggio specifico.
        Restituisce un elenco di reazioni.
      responses:
        "200":
          description: Elenco delle reazioni al messaggio
          content:
            application/json:
              example:
                - reaction_id: 1
                  user_id: 3
                  content: 👍
                  message_id: 4
                - reaction_id: 3
                  user_id: 2
                  content: 👍
                  message_id: 5

              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Reaction"
                minItems: 0
                maxItems: 500

        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "404": { $ref: "#/components/responses/NotFound" }
        "500": { $ref: "#/components/responses/InternalServerError" }
    post:
      tags:
        - messaggio
      operationId: commentMessage
      summary: Aggiungi un commento(reazione) a un messaggio
      description: >
        Aggiunge un commento(reazione) a un messaggio specifico.
      requestBody:
        description: json contenente le informazioni della reazione da inviare
        required: true
        content:
          application/json:
            example:
              reaction_id: 1
              user_id: 3
              content: 👍
              message_id: 4
            schema:
              $ref: "#/components/schemas/Reaction"
      responses:
        "204":
          description: Commento aggiunto correttamente

        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "404": { $ref: "#/components/responses/NotFound" }
        "500": { $ref: "#/components/responses/InternalServerError" }

  /message/{messageID}/reaction/{reactionID}:
    parameters:
      - $ref: "#/components/parameters/messageID"
      - $ref: "#/components/parameters/reactionID"
    delete:
      tags:
        - messaggio
      operationId: uncommentMessage
      summary: Rimuovi un commento(reazione) da un messaggio
      description: >
        Rimuove un commento(reazione) da un messaggio specifico.
        Restituisce l'ID del commento rimosso.
      responses:
        "204":
          description: Commento rimosso correttamente

        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "404": { $ref: "#/components/responses/NotFound" }
        "500": { $ref: "#/components/responses/InternalServerError" }

  /group:
    post:
      tags:
        - gruppo
      operationId: createGroup
      summary: Crea un nuovo gruppo
      description: >
        Crea un nuovo gruppo.
        Restituisce l'ID del gruppo creato.
      requestBody:
        required: true
        description: nome e mebri del gruppo da creare
        content:
          application/json:
            example:
              name: "i più belli"
              members: [1, 2, 5, 42]

            schema:
              type: object
              properties:
                name:
                  description: Nome del gruppo
                  type: string
                  pattern: ^.*?$
                  example: "gruppo di lavoro"
                  minLength: 1
                  maxLength: 50
                members:
                  type: array
                  items:
                    type: integer
                    example: 1
                  minItems: 1
                  maxItems: 200
              required:
                - name
                - members
      responses:
        "200":
          description: Gruppo creato correttamente
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Group"

        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "404": { $ref: "#/components/responses/NotFound" }
        "500": { $ref: "#/components/responses/InternalServerError" }
        "409": { $ref: "#/components/responses/Conflict" }

  /group/{groupID}:
    parameters:
      - $ref: "#/components/parameters/groupID"

    get:
      tags:
        - gruppo
      operationId: getGroup
      summary: Ottieni informazioni su un gruppo
      description: >
        Ottiene le informazioni su un gruppo specifico.
        Restituisce l'ID e il nome del gruppo.
      responses:
        "200":
          description: Informazioni sul gruppo
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Group"

        "404": { $ref: "#/components/responses/NotFound" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "500": { $ref: "#/components/responses/InternalServerError" }

    delete:
      tags:
        - gruppo
      operationId: leaveGroup
      summary: esci da un gruppo
      description: >
        esci da un gruppo specifico.
      responses:
        "204":
          description: Gruppo eliminato correttamente

        "400": { $ref: "#/components/responses/BadRequest" }
        "404": { $ref: "#/components/responses/NotFound" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "500": { $ref: "#/components/responses/InternalServerError" }

  /conversation/{conversationID}/member:
    parameters:
      - $ref: "#/components/parameters/conversationID"

    get:
      tags:
        - gruppo
      operationId: getConversationMembers
      summary: Ottieni i membri di un gruppo
      description: >
        Ottiene tutti i membri di un gruppo specifico.
        Restituisce un elenco di membri del gruppo.
      responses:
        "200":
          description: Elenco dei membri del gruppo
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
                minItems: 0
                maxItems: 400

        "404": { $ref: "#/components/responses/NotFound" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "500": { $ref: "#/components/responses/InternalServerError" }
    post:
      tags:
        - gruppo
      operationId: addToGroup
      summary: Aggiungi un membro o più membri a un gruppo
      description: >
        Aggiunge un membro o più membri a un gruppo specifico.
      requestBody:
        required: true
        description: membri da aggiungere
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/User"
              minItems: 1
              maxItems: 200
      responses:
        "204":
          description: Membro aggiunto correttamente

        "400": { $ref: "#/components/responses/BadRequest" }
        "404": { $ref: "#/components/responses/NotFound" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "500": { $ref: "#/components/responses/InternalServerError" }

  /group/{groupID}/name:
    parameters:
      - $ref: "#/components/parameters/groupID"

    put:
      tags:
        - gruppo
      operationId: setGroupName
      summary: imposta il nome del gruppo
      description: >
        imposta il nome del gruppo specificato.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  pattern: ^.*?$
                  example: "gruppo di lavoro"
                  minLength: 1
                  maxLength: 50
              required:
                - name

      responses:
        "204":
          description: Nome del gruppo impostato correttamente

        "404": { $ref: "#/components/responses/NotFound" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "500": { $ref: "#/components/responses/InternalServerError" }

  /group/{groupID}/photo:
    parameters:
      - $ref: "#/components/parameters/groupID"

    post:
      tags:
        - gruppo
      operationId: setGroupPhoto
      summary: Imposta la foto del gruppo
      description: >
        Imposta la foto del gruppo specificato.
        Restituisce l'ID della foto impostata.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                photo:
                  type: string
                  format: binary
              required:
                - photo
      responses:
        "204":
          description: Foto del gruppo impostata correttamente

        "400": { $ref: "#/components/responses/BadRequest" }
        "404": { $ref: "#/components/responses/NotFound" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "500": { $ref: "#/components/responses/InternalServerError" }

    get:
      tags:
        - gruppo
      operationId: getGroupPhoto
      summary: Ottieni la foto del gruppo
      description: >
        Ottiene la foto del gruppo specificato.
      responses:
        "200":
          description: Foto del gruppo
          content:
            image/jpeg:
              schema:
                type: string
                format: binary

        "400": { $ref: "#/components/responses/BadRequest" }
        "404": { $ref: "#/components/responses/NotFound" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "500": { $ref: "#/components/responses/InternalServerError" }

components:
  #schemi per definire oggetti
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      description: Rappresenta un utente del sistema
      properties:
        user_id:
          description: L'identificatore univoco dell'utente
          type: integer
          example: 1
        name:
          description: Il nome dell'utente
          type: string
          pattern: ^.*?$
          example: "Maria"
          minLength: 3
          maxLength: 16
        username:
          description: Lo username dell'utente
          type: string
          pattern: ^.*?$
          example: "marta"
          minLength: 3
          maxLength: 16
    Group:
      type: object
      description: Rappresenta un gruppo all'interno del sistema
      properties:
        id:
          description: L'identificatore univoco del gruppo (della conversazione)
          type: integer
          example: 1
        name:
          description: Il nome del gruppo
          type: string
          pattern: ^.*?$
          example: "gruppo di lavoro"
          minLength: 1
          maxLength: 50
    Conversation:
      type: object
      description: Rappresenta una conversazione all'interno del sistema
      properties:
        conversation_id:
          description: L'identificatore univoco della conversazione
          type: integer
          example: 1
        name:
          description: Il nome della conversazione
          type: string
          pattern: ^.*?$
          example: "conversazione di lavoro"
          minLength: 1
          maxLength: 50
        is_group:
          description: Indica se la conversazione è un gruppo
          type: boolean
          example: true
    Message:
      type: object
      description: Rappresenta un messaggio all'interno del sistema
      properties:
        message_id:
          description: L'identificatore univoco del messaggio
          type: integer
          example: 1
        sender_id:
          description: L'identificatore univoco dell'utente che ha inviato il messaggio
          type: integer
          example: 1
        sender:
          description: Il nome dell'utente che ha inviato il messaggio
          type: string
          pattern: ^.*?$
          example: "marta"
          minLength: 3
          maxLength: 16
        replied_message_id:
          description: L'identificatore del messaggio a cui si sta rispondendo (opzionale)
          type: integer
          example: 1
        conversation_id:
          description: L'identificatore della conversazione a cui appartiene il messaggio
          type: integer
          example: 1
        content:
          description: Il contenuto del messaggio
          type: string
          pattern: ^.*?$
          example: "Ciao, come stai?"
          minLength: 1
          maxLength: 10000
        photo:
          description: indica se il messaggio è una foto (opzionale)
          type: boolean
          example: false
        status:
          description: Lo stato del messaggio (0 - inviato, 1 - ricevuto, 2 - letto)
          type: integer
          example: 1
        timestamp:
          description: La data e l'ora in cui il messaggio è stato inviato
          type: string
          format: date-time
          pattern: ^[0-9]+-[0-9]+-[0-9]+[A-Za-z][0-9]+:[0-9]+:[A-Za-z0-9]+$
          example: "2023-10-01T12:00:00Z"
          minLength: 20
          maxLength: 20
    Reaction:
      description: Rappresenta una reazione a un messaggio
      type: object
      properties:
        reaction_id:
          description: L'identificatore univoco della reazione
          type: integer
          example: 1
        user_id:
          description: L'identificatore univoco dell'utente che ha aggiunto la reazione
          type: integer
          example: 1
        content:
          description: Il contenuto della reazione (emoji)
          type: string
          pattern: ^.+$
          example: "👍"
          minLength: 1
          maxLength: 1
        message_id:
          description: L'identificatore del messaggio a cui è stata aggiunta la reazione
          type: integer
          example: 1

  #parametri utilizzati come richieste dell'utente
  parameters:
    userID:
      name: userID
      in: path
      required: true
      schema:
        type: string
        pattern: "^[a-zA-Z0-9]+$"
        minLength: 2
        maxLength: 12
        example: "abcdef012345"
      description: l'identificazione univoca dell'utente

    groupID:
      name: groupID
      in: path
      required: true
      schema:
        type: string
        pattern: "^[a-zA-Z0-9]+$"
        minLength: 2
        maxLength: 12
        example: "abcdef012345"
      description: l'identificazione univoca del gruppo

    conversationID:
      name: conversationID
      in: path
      required: true
      schema:
        type: string
        pattern: "^[a-zA-Z0-9]+$"
        minLength: 2
        maxLength: 12
        example: "abcdef012345"
      description: l'identificazione univoca della conversazione

    messageID:
      name: messageID
      in: path
      required: true
      schema:
        type: string
        pattern: "^[a-zA-Z0-9]+$"
        minLength: 2
        maxLength: 12
        example: "abcdef012345"
      description: l'identificazione univoca del messaggio

    reactionID:
      name: reactionID
      in: path
      required: true
      schema:
        type: string
        pattern: "^[a-zA-Z0-9]+$"
        minLength: 2
        maxLength: 12
        example: "abcdef012345"
      description: l'identificazione univoca della reazione

  #risposte di errore predefinite
  responses:
    NotFound:
      description: Risorsa non trovata
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Risorsa non trovata"
    InternalServerError:
      description: Errore interno del server
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Errore interno del server"
    Unauthorized:
      description: Non autorizzato
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Non autorizzato"
    BadRequest:
      description: Richiesta non valida
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Richiesta non valida"
    Conflict:
      description: Conflitto
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Conflitto"

security:
  - bearerAuth: [] # use the same name as above
