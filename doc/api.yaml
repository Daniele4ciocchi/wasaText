openapi: 3.0.0
info:
  title: wasaText
  version: 3.0.1
  description: API per il progetto wasaText
servers:
  - url: http://127.0.0.1:3000
    description: Server di sviluppo in locale

  # This YAML file defines a set of API operations for a messaging application.
  # Below is a brief description of each operation:
  #
  # doLogin:
  # x - Simplified login operation for user authentication.
  #
  # setMyUserName:
  # x - Allows the user to set or update their username.
  #
  # getMyConversations:
  # x - Retrieves a list of all conversations associated with the user.
  #
  # getConversation:
  # x - Fetches the details of a specific conversation by its identifier.
  #
  # sendMessage:
  # x - Sends a message to a specific conversation or user.
  #
  # forwardMessage:
  # x - Forwards an existing message to another conversation or user.
  #
  # commentMessage:
  # x - Adds a comment to a specific message.
  #
  # uncommentMessage:
  # x - Removes a previously added comment from a message.
  #
  # deleteMessage:
  # x - Deletes a specific message from a conversation.
  #
  # addToGroup:
  # x - Adds a user to a group conversation.
  #
  # leaveGroup:
  # x - Allows the user to leave a group conversation.
  #
  # setGroupName:
  #   - Updates the name of a group conversation.
  #
  # setMyPhoto:
  # x - Sets or updates the user's profile photo.
  #
  # setGroupPhoto:
  #   - Sets or updates the photo of a group conversation.

paths:
  /session:
    post:
      tags: ["login"]
      summary: Logs in the user
      description: |-
        If the user does not exist, it will be created,
        and an identifier is returned.
        If the user exists, the user identifier is returned.
      operationId: doLogin
      requestBody:
        description: User details
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Maria
                  pattern: "ˆ.*?$"
                  minLength: 3
                  maxLength: 16
        required: true
      responses:
        "201":
          description: User log-in action successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  identifier:
                    type: string
                    example: "abcdef012345"
        "400":
          description: Invalid request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid username"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Internal server error"

  /user:
    get:
      tags:
        - utente
      operationId: getUsers
      summary: Ottieni la lista di utenti
      description: >
        Ottiene la lista di utenti registrati.
        Restituisce un elenco di utenti
      responses:
        "200":
          description: Elenco degli utenti
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
        "401" : { $ref: "#/components/responses/Unauthorized" }
        "500" : { $ref: "#/components/responses/InternalServerError" }
    
  /user/{userID}:
    parameters:
      - $ref: "#/components/parameters/userID"

    get:
      tags:
        - utente
      operationId: getUser
      summary: Ottieni informazioni sull'utente
      description: >
        Ottiene le informazioni sull'utente specificato dall'ID.
        Restituisce tutte le informazioni dell'utente.
      responses:
        "200":
          description: Informazioni sull'utente
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400": { $ref: "#/components/responses/BadRequest" }
        "401" : { $ref: "#/components/responses/Unauthorized" }
        "404": { $ref: "#/components/responses/NotFound" }
        "500" : { $ref: "#/components/responses/InternalServerError" }

  /user/{userID}/photo:
    parameters:
      - $ref: "#/components/parameters/userID"

    get:
      tags:
        - utente
      operationId: getUserPhoto
      summary: Ottieni la foto dell'utente
      description: >
        Ottiene la foto del profilo dell'utente specificato.
        Restituisce l'ID della foto dell'utente.
      responses:
        "200":
          description: Foto dell'utente
          content:
            application/json:
              schema:
                type: object
                properties:
                  photoID:
                    type: integer
                    example: 1
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "404": { $ref: "#/components/responses/NotFound" }
        "500": { $ref: "#/components/responses/InternalServerError" }

  /me:

    get:
      tags:
        - utente
      operationId: getMessage
      summary: Ottieni informazioni sull'utente loggato
      description: >
        Ottiene le informazioni sull'utente loggato.
        Restituisce tutte le informazioni dell'utente.
      responses:
        "200":
          description: Informazioni sull'utente loggato
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401": { $ref: "#/components/responses/Unauthorized" }
        "404": { $ref: "#/components/responses/NotFound" }
        "500": { $ref: "#/components/responses/InternalServerError" }

  /me/username:
    
    put:
      tags:
        - utente
      operationId: setMyUserName
      summary: Imposta lo username dell'utente
      description: >
        Imposta lo username utente per l'utente corrente.
        Se il nome utente è già in uso, restituisce un errore.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
              required:
                - username
      responses:
        "200":
          description: Nome utente impostato correttamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
        "401": { $ref: "#/components/responses/Unauthorized" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "500": { $ref: "#/components/responses/InternalServerError" }

  /me/photo:

    put:
      tags:
        - utente
      operationId: setMyPhoto
      summary: Imposta la foto del profilo
      description: >
        Imposta la foto del profilo per l'utente corrente.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                photo:
                  type: string
                  format: binary
              required:
                - photo
      responses:
        "200":
          description: Foto del profilo impostata correttamente
          
        "401": { $ref: "#/components/responses/Unauthorized" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "500": { $ref: "#/components/responses/InternalServerError" }

  /conversation:
    get:
      tags:
        - utente
      operationId: getMyConversations
      summary: Ottieni le conversazioni dell'utente
      description: >
        Ottiene tutte le conversazioni associate all'utente specificato.
        Restituisce un elenco di conversazioni.

      responses:
        "200":
          description: Elenco delle conversazioni
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Conversation"
        "401": { $ref: "#/components/responses/Unauthorized" }
        "404": { $ref: "#/components/responses/NotFound" }
        "500": { $ref: "#/components/responses/InternalServerError" }

    post:
      tags:
        - conversazione
      operationId: addConversation
      summary: Crea una nuova conversazione
      description: >
        Crea una nuova conversazione tra gli utenti specificati.
        Restituisce la conversazione creata.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  
              required:
                - name
      responses:
        "200":
          description: Conversazione creata correttamente
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Conversation"
                  
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "404": { $ref: "#/components/responses/NotFound" }
        "500": { $ref: "#/components/responses/InternalServerError" }


  /conversation/{conversationID}:
    parameters:
      - $ref: "#/components/parameters/conversationID"
    get:
      tags:
        - conversazione
      operationId: getConversations
      summary: Ottieni una conversazione specifica
      description: >
        Ottiene i dettagli di una conversazione specifica.
      responses:
        "200":
          description: Dettagli della conversazione
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Conversation"
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "404": { $ref: "#/components/responses/NotFound" }
        "500": { $ref: "#/components/responses/InternalServerError" }

  /conversation/{conversationID}/message:
    parameters:
      - $ref: "#/components/parameters/conversationID"

    get:
      tags:
        - conversazione
      operationId: getMessages
      summary: Ottieni i messaggi di una conversazione
      description: >
        Ottiene tutti i messaggi di una conversazione specifica.
        Restituisce un elenco di messaggi.
      responses:
        "200":
          description: Elenco dei messaggi
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Message"

        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "404": { $ref: "#/components/responses/NotFound" }
        "500": { $ref: "#/components/responses/InternalServerError" }

    post:
      tags:
        - conversazione
      operationId: sendMessage
      summary: Invia un messaggio
      description: >
        Invia un messaggio a una conversazione specifica.
        Restituisce l'ID del messaggio inviato.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Message"
      responses:
        "200":
          description: Messaggio inviato correttamente
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "404": { $ref: "#/components/responses/NotFound" }
        "500": { $ref: "#/components/responses/InternalServerError" }

  /conversation/{conversationID}/lastMessage:
    parameters:
      - $ref: "#/components/parameters/conversationID"

    get:
      tags:
        - conversazione
      operationId: getLastMessage
      summary: Ottieni l'ultimo messaggio di una conversazione
      description: >
        Ottiene l'ultimo messaggio di una conversazione specifica.
        Restituisce i dettagli dell'ultimo messaggio.
      responses:
        "200":
          description: Dettagli dell'ultimo messaggio
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"

        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "404": { $ref: "#/components/responses/NotFound" }
        "500": { $ref: "#/components/responses/InternalServerError" }

  /conversation/{messageID}/forwarded:
    parameters:
      - $ref: "#/components/parameters/messageID"

    post:
      tags:
        - conversazione
      operationId: forwardMessage
      summary: Inoltra un messaggio
      description: >
        Inoltra un messaggio a una conversazione specifica.
        Restituisce l'ID del messaggio inoltrato.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                reciver_id:
                  type: integer
                  example: 1
      responses:
        "200":
          description: Messaggio inoltrato correttamente
          
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "404": { $ref: "#/components/responses/NotFound" }
        "500": { $ref: "#/components/responses/InternalServerError" }
    
  /me/newmessage:
    get:
      tags:
        - messaggio
      operationId: getNewMessages
      summary: Ottieni i nuovi messaggi
      description: >
        Ottiene i nuovi messaggi per l'utente loggato.
        Restituisce un elenco di nuovi messaggi.
      responses:
        "200":
          description: Elenco dei nuovi messaggi
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Message"

        "401": { $ref: "#/components/responses/Unauthorized" }
        "404": { $ref: "#/components/responses/NotFound" }
        "500": { $ref: "#/components/responses/InternalServerError" }

  /messages/{messageID}:
    parameters:
      - $ref: "#/components/parameters/messageID"

    delete:
      tags:
        - messaggio
      operationId: deleteMessage
      summary: Elimina un messaggio
      description: >
        Elimina un messaggio specifico.
        Restituisce l'ID del messaggio eliminato.
      responses:
        "200":
          description: Messaggio eliminato correttamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  messageID:
                    type: integer
                    example: 1

        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "404": { $ref: "#/components/responses/NotFound" }
        "500": { $ref: "#/components/responses/InternalServerError" }

  /messages/{messageID}/reaction:
    parameters:
      - $ref: "#/components/parameters/messageID"

    get:
      tags:
        - messaggio
      operationId: getMessageReactions
      summary: Ottieni le reazioni a un messaggio
      description: >
        Ottiene tutte le reazioni a un messaggio specifico.
        Restituisce un elenco di reazioni.
      responses:
        "200":
          description: Elenco delle reazioni al messaggio
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Reaction"

        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "404": { $ref: "#/components/responses/NotFound" }
        "500": { $ref: "#/components/responses/InternalServerError" }
    post:
      tags:
        - messaggio
      operationId: commentMessage
      summary: Aggiungi un commento(reazione) a un messaggio
      description: >
        Aggiunge un commento(reazione) a un messaggio specifico.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Reaction"
      responses:
        "200":
          description: Commento aggiunto correttamente
          
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "404": { $ref: "#/components/responses/NotFound" }
        "500": { $ref: "#/components/responses/InternalServerError" }

  /messages/{messageID}/reaction/{reactionID}:
    parameters:
      - $ref: "#/components/parameters/messageID"
      - $ref: "#/components/parameters/reactionID"
    delete:
      tags:
        - messaggio
      operationId: uncommentMessage
      summary: Rimuovi un commento(reazione) da un messaggio
      description: >
        Rimuove un commento(reazione) da un messaggio specifico.
        Restituisce l'ID del commento rimosso.
      responses:
        "200":
          description: Commento rimosso correttamente
          
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "404": { $ref: "#/components/responses/NotFound" }
        "500": { $ref: "#/components/responses/InternalServerError" }

  /group:
    post:
      tags:
        - gruppo
      operationId: createGroup
      summary: Crea un nuovo gruppo
      description: >
        Crea un nuovo gruppo.
        Restituisce l'ID del gruppo creato.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  minLength: 1
                  maxLength: 50
                members:
                  type: array
                  items:
                    type: integer
              required:
                - name
      responses:
        "200":
          description: Gruppo creato correttamente
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Group"
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "404": { $ref: "#/components/responses/NotFound" }
        "500": { $ref: "#/components/responses/InternalServerError" }
        "409": { $ref: "#/components/responses/Conflict" }

  /group/{groupID}:
    parameters:
      - $ref: "#/components/parameters/groupID"

    get:
      tags:
        - gruppo
      operationId: getGroup
      summary: Ottieni informazioni su un gruppo
      description: >
        Ottiene le informazioni su un gruppo specifico.
        Restituisce l'ID e il nome del gruppo.
      responses:
        "200":
          description: Informazioni sul gruppo
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Group"
        "404": { $ref: "#/components/responses/NotFound" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "500": { $ref: "#/components/responses/InternalServerError" }
    
    delete:
      tags:
        - gruppo
      operationId: leaveGroup
      summary: esci da un gruppo
      description: >
        esci da un gruppo specifico.
      responses:
        "200":
          description: Gruppo eliminato correttamente

        "400": { $ref: "#/components/responses/BadRequest" }
        "404": { $ref: "#/components/responses/NotFound" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "500": { $ref: "#/components/responses/InternalServerError" }

  /group/{groupID}/members:
    parameters:
      - $ref: "#/components/parameters/groupID"

    get:
      tags:
        - gruppo
      operationId: getGroupMembers
      summary: Ottieni i membri di un gruppo
      description: >
        Ottiene tutti i membri di un gruppo specifico.
        Restituisce un elenco di membri del gruppo.
      responses:
        "200":
          description: Elenco dei membri del gruppo
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"

        "404": { $ref: "#/components/responses/NotFound" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "500": { $ref: "#/components/responses/InternalServerError" }
    post:
      tags:
        - gruppo
      operationId: addGroupMembers
      summary: Aggiungi un membro o più membri a un gruppo
      description: >
        Aggiunge un membro o più membri a un gruppo specifico.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/User"
      responses:
        "200":
          description: Membro aggiunto correttamente
          

        "400": { $ref: "#/components/responses/BadRequest" }
        "404": { $ref: "#/components/responses/NotFound" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "500": { $ref: "#/components/responses/InternalServerError" }

  /group/{groupID}/name:
    parameters:
      - $ref: "#/components/parameters/groupID"

    post:
      tags:
        - gruppo
      operationId: setGroupName
      summary: imposta il nome del gruppo
      description: >
        imposta il nome del gruppo specificato.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  minLength: 1
                  maxLength: 50
              required:
                - name

      responses:
        "200":
          description: Nome del gruppo
          
        "404": { $ref: "#/components/responses/NotFound" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "500": { $ref: "#/components/responses/InternalServerError" }

  /group/{groupID}/photo:
    parameters:
      - $ref: "#/components/parameters/groupID"

    post:
      tags:
        - gruppo
      operationId: setGroupPhoto
      summary: Imposta la foto del gruppo
      description: >
        Imposta la foto del gruppo specificato.
        Restituisce l'ID della foto impostata.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                photo:
                  type: string
                  format: binary
              required:
                - photo
      responses:
        "200":
          description: Foto del gruppo impostata correttamente
          
        "400": { $ref: "#/components/responses/BadRequest" }
        "404": { $ref: "#/components/responses/NotFound" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "500": { $ref: "#/components/responses/InternalServerError" }

  /group/{groupID}/photo/:
    parameters:
      - $ref: "#/components/parameters/groupID"

    get:
      tags:
        - gruppo
      operationId: getGroupPhoto
      summary: Ottieni la foto del gruppo
      description: >
        Ottiene la foto del gruppo specificato.
      responses:
        "200":
          description: Foto del gruppo
          

        "400": { $ref: "#/components/responses/BadRequest" }
        "404": { $ref: "#/components/responses/NotFound" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "500": { $ref: "#/components/responses/InternalServerError" }

components:
  #schemi per definire oggetti
  securitySchemes:
    bearerAuth: # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT # optional, arbitrary value for documentation purposes

  schemas:
    User:
      type: object
      properties:
        user_id:
          type: integer
          example: 1
        name:
          type: string
          example: "Maria"
        username:
          type: string
          example: "marta"
    Group:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "gruppo di lavoro"
    Conversation:
      type: object
      properties:
        conversation_id:
          type: integer
          example: 1
        name:
          type: string
          example: "conversazione di lavoro"
        is_group:
          type: boolean
          example: true
    Message:
      type: object
      properties:
        message_id:
          type: integer
          example: 1
        sender_id:
          type: integer
          example: 1
        sender:
          type: string
          example: "marta"
        replied_message_id:
          type: integer
          example: 1
        conversation_id:
          type: integer
          example: 1
        content:
          type: string
          example: "Ciao, come stai?"
        photo:
          type: boolean
          example: false
        status:
          type: integer
          example: 1
        timestamp:
          type: string
          format: date-time
          example: "2023-10-01T12:00:00Z"
    Reaction:
      type: object
      properties:
        reaction_id:
          type: integer
          example: 1
        user_id:
          type: integer
          example: 1
        content:
          type: string
          example: "UTF-8"
        message_id:
          type: integer
          example: 1
        

  #parametri utilizzati come richieste dell'utente
  parameters:
    userID:
      name: userID
      in: path
      required: true
      schema:
        type: string
      description: l'identificazione univoca dell'utente

    groupID:
      name: groupID
      in: path
      required: true
      schema:
        type: string
      description: l'identificazione univoca del gruppo

    conversationID:
      name: conversationID
      in: path
      required: true
      schema:
        type: string
      description: l'identificazione univoca della conversazione

    messageID:
      name: messageID
      in: path
      required: true
      schema:
        type: integer
      description: l'identificazione univoca del messaggio

    reactionID:
      name: reactionID
      in: path
      required: true
      schema:
        type: integer
      description: l'identificazione univoca della reazione

  #risposte di errore predefinite
  responses:
    NotFound:
      description: Risorsa non trovata
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Risorsa non trovata"
    InternalServerError:
      description: Errore interno del server
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Errore interno del server"
    Unauthorized:
      description: Non autorizzato
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Non autorizzato"
    BadRequest:
      description: Richiesta non valida
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Richiesta non valida"
    Conflict:
      description: Conflitto
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Conflitto"


security:
  - bearerAuth: [] # use the same name as above
