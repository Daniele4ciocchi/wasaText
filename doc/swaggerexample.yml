openapi: 3.0.0
info:
  title: Simple User API
  version: 1.0.0
  description: A simple API to manage users

paths:

  /users:
    get:
      summary: Get all users
      responses:
        '200':
          description: A list of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'

        '500': {$ref: '#/components/responses/ErrorResponse'}

    post:
      summary: Create a new user
      requestBody:
        $ref: '#/components/requestBodies/UserCreation'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/ErrorResponse'

  /users/{userId}:
    get:
      summary: Get a user by ID
      parameters:
        - $ref: '#/components/parameters/UserId'
      responses:
        '200':
          description: A single user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          $ref: '#/components/responses/ErrorResponse'

    put:
      summary: Update a user by ID
      parameters:
        - $ref: '#/components/parameters/UserId'
      requestBody:
        $ref: '#/components/requestBodies/UserUpdate'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/ErrorResponse'
        '404':
          $ref: '#/components/responses/ErrorResponse'

    delete:
      summary: Delete a user by ID
      parameters:
        - $ref: '#/components/parameters/UserId'
      responses:
        '204':
          description: User deleted successfully
        '404':
          $ref: '#/components/responses/ErrorResponse'

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          example: 1
        username:
          type: string
          example: "daniele123"

    Error:
      type: object
      properties:
        code:
          type: integer
          example: 404
        message:
          type: string
          example: "User not found"

  parameters:
    UserId:
      name: userId
      in: path
      required: true
      schema:
        type: integer
      description: The unique identifier of a user

  requestBodies:
    UserCreation:
      description: Request body for creating a new user
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              username:
                type: string
                example: "daniele123"
            required:
              - username

    UserUpdate:
      description: Request body for updating an existing user
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              username:
                type: string
                example: "new_username"
              email:
                type: string
                format: email
                example: "new_email@example.com"

  responses:
    ErrorResponse:
      description: Error response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
